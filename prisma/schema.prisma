generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bettor {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?             @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  user              user?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bettor_prediction bettor_prediction[]
  feedback          feedback[]
}

model bettor_prediction {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bettor_id     String?     @db.Uuid
  prediction_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  bettor        bettor?     @relation(fields: [bettor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prediction    prediction? @relation(fields: [prediction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model feedback {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content       String      @db.VarChar(255)
  bettor_id     String?     @db.Uuid
  prediction_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  bettor        bettor?     @relation(fields: [bettor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prediction    prediction? @relation(fields: [prediction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model match_data {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data            String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prediction      prediction[]
}

model organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  match_data  match_data[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prediction  prediction[]
  team_member team_member[]
}

model prediction {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  match_id          String?             @db.Uuid
  predicted_result  String              @db.VarChar(255)
  organization_id   String?             @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  bettor_prediction bettor_prediction[]
  feedback          feedback[]
  match_data        match_data?         @relation(fields: [match_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization      organization?       @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team_member {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?       @db.Uuid
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  bettor       bettor[]
  organization organization[]
  team_member  team_member[]
}
